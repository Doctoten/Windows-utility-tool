#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ti·ªán √≠ch h·ªó tr·ª£ c√†i Windows - Windows Installation Support Utility
Phi√™n b·∫£n: 3.1 (C·∫£i ti·∫øn ghi log)
Ph√°t tri·ªÉn b·ªüi: Doctoten
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import subprocess
import os
import sys
import shutil
from pathlib import Path
import threading
import ctypes

def is_admin():
    """Ki·ªÉm tra xem ·ª©ng d·ª•ng c√≥ ƒëang ch·∫°y v·ªõi quy·ªÅn Administrator kh√¥ng."""
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

class WindowsUtilityTool:
    def __init__(self, root):
        self.root = root
        self.setup_window()
        self.create_widgets()
        
    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh."""
        self.root.title("üõ†Ô∏è Ti·ªán √≠ch h·ªó tr·ª£ c√†i Win d·∫°o v3.1")
        self.root.geometry("520x450")
        self.root.resizable(False, False)
        
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (520 // 2)
        y = (self.root.winfo_screenheight() // 2) - (450 // 2)
        self.root.geometry(f"520x450+{x}+{y}")
        
        try:
            if getattr(sys, 'frozen', False):
                icon_path = os.path.join(sys._MEIPASS, 'icon.ico')
            else:
                icon_path = 'icon.ico'
            self.root.iconbitmap(icon_path)
        except:
            pass
            
        self.root.configure(bg='#f0f0f0')
        
    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán."""
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        header_frame.pack(fill='x', padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        tk.Label(
            header_frame, text="üõ†Ô∏è Ti·ªán √≠ch h·ªó tr·ª£ c√†i Win d·∫°o",
            font=('Arial', 16, 'bold'), fg='white', bg='#2c3e50'
        ).pack(pady=(15, 5))
        
        tk.Label(
            header_frame, text="Phi√™n b·∫£n ho√†n ch·ªânh v3.1",
            font=('Arial', 10), fg='#ecf0f1', bg='#2c3e50'
        ).pack()
        
        content_frame = tk.Frame(self.root, bg='#f0f0f0')
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        button_style = {
            'font': ('Arial', 11, 'bold'), 'width': 22, 'height': 2,
            'relief': 'raised', 'bd': 2, 'cursor': 'hand2'
        }
        
        row1_frame = tk.Frame(content_frame, bg='#f0f0f0')
        row1_frame.pack(fill='x', pady=10)
        
        tk.Button(
            row1_frame, text="üîß Thi·∫øt l·∫≠p Windows", bg='#3498db', fg='white',
            command=self.windows_setup, **button_style
        ).pack(side='left', padx=10)
        
        tk.Button(
            row1_frame, text="üåê Thi·∫øt l·∫≠p m·∫°ng", bg='#95a5a6', fg='white',
            command=self.network_setup, **button_style
        ).pack(side='right', padx=10)
        
        row2_frame = tk.Frame(content_frame, bg='#f0f0f0')
        row2_frame.pack(fill='x', pady=10)
        
        tk.Button(
            row2_frame, text="üóëÔ∏è X√≥a Bloatware", bg='#e74c3c', fg='white',
            command=self.remove_bloatware, **button_style
        ).pack(side='left', padx=10)
        
        tk.Button(
            row2_frame, text="üì∂ Sao l∆∞u Wifi", bg='#f39c12', fg='white',
            command=self.backup_wifi, **button_style
        ).pack(side='right', padx=10)
        
        row3_frame = tk.Frame(content_frame, bg='#f0f0f0')
        row3_frame.pack(fill='x', pady=10)

        tk.Button(
            row3_frame, text="üíæ Sao l∆∞u Driver", bg='#27ae60', fg='white',
            command=self.backup_drivers, **button_style
        ).pack(side='left', padx=10)
        
        self.status_var = tk.StringVar(value="S·∫µn s√†ng...")
        status_frame = tk.Frame(self.root, bg='#34495e', height=30)
        status_frame.pack(fill='x', side='bottom')
        status_frame.pack_propagate(False)
        
        tk.Label(
            status_frame, textvariable=self.status_var, font=('Arial', 9),
            fg='white', bg='#34495e'
        ).pack(side='left', padx=10, pady=5)

    def run_in_thread(self, target_func, *args):
        thread = threading.Thread(target=target_func, args=args, daemon=True)
        thread.start()

    def run_command(self, command, shell=True):
        try:
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            result = subprocess.run(
                command, shell=shell, capture_output=True, text=True,
                check=False, encoding='utf-8', errors='ignore', startupinfo=startupinfo
            )
            return result.stdout + result.stderr
        except Exception as e:
            return f"L·ªói th·ª±c thi l·ªánh: {str(e)}"

    def update_status(self, message):
        self.status_var.set(message)
        self.root.update()
        
    def windows_setup(self): messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
    def network_setup(self): messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
    def remove_bloatware(self): messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
    def backup_drivers(self): messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")

    def backup_wifi(self):
        """Ch·ª©c nƒÉng sao l∆∞u WiFi v·ªõi c∆° ch·∫ø ch·ªâ ghi log khi c√≥ l·ªói."""
        self.update_status("B·∫Øt ƒë·∫ßu sao l∆∞u WiFi...")
        self.run_in_thread(self._backup_wifi_task)

    def _backup_wifi_task(self):
        log_messages = []
        
        try:
            log_messages.append("=== B·∫Øt ƒë·∫ßu sao l∆∞u WiFi v3.1 ===\n")
            
            self.update_status("ƒêang l·∫•y danh s√°ch WiFi...")
            profiles_result = self.run_command("netsh wlan show profiles")
            log_messages.append(f"K·∫øt qu·∫£ l·ªánh 'netsh wlan show profiles':\n{profiles_result}\n")
            
            profiles = []
            for line in profiles_result.split('\n'):
                if "All User Profile" in line:
                    try:
                        profile_name = line.split(':', 1)[1].strip()
                        if profile_name:
                            profiles.append(profile_name)
                    except IndexError:
                        continue
            
            log_messages.append(f"ƒê√£ ph√¢n t√≠ch. T√¨m th·∫•y {len(profiles)} profile.\n")
            if not profiles:
                messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", "Kh√¥ng c√≥ profile WiFi n√†o ƒë·ªÉ sao l∆∞u.")
                self.update_status("S·∫µn s√†ng.")
                return

            backup_dir = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ƒë·ªÉ l∆∞u backup WiFi")
            if not backup_dir:
                self.update_status("ƒê√£ h·ªßy sao l∆∞u.")
                return
            
            backup_path = Path(backup_dir) / "WiFi_Backup"
            backup_path.mkdir(exist_ok=True)
            log_messages.append(f"Th∆∞ m·ª•c sao l∆∞u: {backup_path}\n")
            
            wifi_data = []
            success_count = 0
            for i, profile in enumerate(profiles, 1):
                self.update_status(f"ƒêang x·ª≠ l√Ω {i}/{len(profiles)}: {profile}")
                try:
                    cmd_export = f'netsh wlan export profile name="{profile}" folder="{backup_path}" key=clear'
                    self.run_command(cmd_export)
                    
                    cmd_show = f'netsh wlan show profile name="{profile}" key=clear'
                    result_show = self.run_command(cmd_show)
                    
                    password = "(Kh√¥ng c√≥ m·∫≠t kh·∫©u ho·∫∑c l·ªói)"
                    for res_line in result_show.split('\n'):
                        if "Key Content" in res_line:
                            password = res_line.split(':', 1)[1].strip()
                            break
                    
                    wifi_data.append(f"usename: {profile}   : {password}")
                    success_count += 1
                    log_messages.append(f"Th√†nh c√¥ng: {profile}\n")
                except Exception as e:
                    log_messages.append(f"L·ªñI v·ªõi profile '{profile}': {str(e)}\n")
                    wifi_data.append(f"usename: {profile}   : (L·ªói: {str(e)})")
                    continue
            
            if wifi_data:
                txt_file_path = backup_path / "WiFi_Passwords.txt"
                with open(txt_file_path, "w", encoding="utf-8") as f:
                    f.write("\n".join(wifi_data))
                log_messages.append("Ghi file .txt th√†nh c√¥ng.\n")

            messagebox.showinfo("Ho√†n th√†nh", 
                              f"ƒê√£ x·ª≠ l√Ω xong. Th√†nh c√¥ng: {success_count}/{len(profiles)}.\n"
                              f"D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u t·∫°i:\n{backup_path}")
            
            os.startfile(backup_path)

        except Exception as e:
            # Ch·ªâ ghi log file khi c√≥ l·ªói x·∫£y ra
            log_file = Path.home() / "windows_utility_tool_wifi_log.txt"
            error_message = f"L·ªói nghi√™m tr·ªçng: {str(e)}"
            log_messages.append(f"\nL·ªñI NGHI√äM TR·ªåNG X·∫¢Y RA: {error_message}")
            
            try:
                with open(log_file, "w", encoding="utf-8") as log:
                    log.write("\n".join(log_messages))
                messagebox.showerror("L·ªói", f"{error_message}\n\nChi ti·∫øt l·ªói ƒë√£ ƒë∆∞·ª£c ghi t·∫°i:\n{log_file}")
            except Exception as log_e:
                 messagebox.showerror("L·ªói nghi√™m tr·ªçng", f"L·ªói ch√≠nh: {error_message}\n\nKh√¥ng th·ªÉ ghi file log: {log_e}")

        finally:
            self.update_status("S·∫µn s√†ng.")

def main():
    if os.name != 'nt':
        messagebox.showerror("Kh√¥ng t∆∞∆°ng th√≠ch", "C√¥ng c·ª• n√†y ch·ªâ ch·∫°y tr√™n Windows.")
        return
        
    if not is_admin():
        try:
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
        except Exception as e:
            messagebox.showerror("Y√™u c·∫ßu quy·ªÅn Admin", f"Kh√¥ng th·ªÉ t·ª± ƒë·ªông y√™u c·∫ßu quy·ªÅn Admin.\nL·ªói: {e}")
        return

    try:
        root = tk.Tk()
        app = WindowsUtilityTool(root)
        root.mainloop()
    except Exception as e:
        messagebox.showerror("L·ªói kh·ªüi ƒë·ªông", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {str(e)}")

if __name__ == "__main__":
    main()
