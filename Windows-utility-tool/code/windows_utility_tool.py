#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ti·ªán √≠ch h·ªó tr·ª£ c√†i Windows - Windows Installation Support Utility
Phi√™n b·∫£n: 4.4 (Hi·ªÉn th·ªã th√¥ng tin DNS)
Ph√°t tri·ªÉn b·ªüi: Doctoten
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import subprocess
import os
import sys
import shutil
from pathlib import Path
import threading
import ctypes
import psutil
import time
import re

# --- Th√™m th∆∞ vi·ªán cho Mutex ---
from ctypes import wintypes

class SingleInstance:
    """
    S·ª≠ d·ª•ng m·ªôt 'named mutex' ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ m·ªôt phi√™n b·∫£n c·ªßa ·ª©ng d·ª•ng ƒëang ch·∫°y.
    """
    def __init__(self, name):
        self.mutex_name = name
        self.mutex_handle = None
        
        # ƒê·ªãnh nghƒ©a c√°c h√†m WinAPI c·∫ßn thi·∫øt
        self.CreateMutex = ctypes.windll.kernel32.CreateMutexW
        self.CreateMutex.argtypes = [ctypes.c_void_p, wintypes.BOOL, wintypes.LPCWSTR]
        self.CreateMutex.restype = wintypes.HANDLE

        self.GetLastError = ctypes.windll.kernel32.GetLastError
        self.GetLastError.restype = wintypes.DWORD

        self.ReleaseMutex = ctypes.windll.kernel32.ReleaseMutex
        self.ReleaseMutex.argtypes = [wintypes.HANDLE]
        self.ReleaseMutex.restype = wintypes.BOOL

        self.CloseHandle = ctypes.windll.kernel32.CloseHandle
        self.CloseHandle.argtypes = [wintypes.HANDLE]
        self.CloseHandle.restype = wintypes.BOOL
        
        # C√°c h·∫±ng s·ªë c·∫ßn thi·∫øt
        self.ERROR_ALREADY_EXISTS = 183

    def __enter__(self):
        self.mutex_handle = self.CreateMutex(None, False, self.mutex_name)
        if self.GetLastError() == self.ERROR_ALREADY_EXISTS:
            self.CloseHandle(self.mutex_handle)
            self.mutex_handle = None
            raise RuntimeError("M·ªôt phi√™n b·∫£n kh√°c c·ªßa ·ª©ng d·ª•ng ƒë√£ ƒëang ch·∫°y.")
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if self.mutex_handle:
            self.ReleaseMutex(self.mutex_handle)
            self.CloseHandle(self.mutex_handle)

def is_admin():
    """Ki·ªÉm tra xem ·ª©ng d·ª•ng c√≥ ƒëang ch·∫°y v·ªõi quy·ªÅn Administrator kh√¥ng."""
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def resource_path(relative_path):
    """ L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn t√†i nguy√™n, ho·∫°t ƒë·ªông cho c·∫£ ch·∫ø ƒë·ªô dev v√† PyInstaller """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

class WindowsUtilityTool:
    def __init__(self, root):
        self.root = root
        self.setup_window()
        self.create_widgets()
        
    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh."""
        self.root.title("üõ†Ô∏è Ti·ªán √≠ch h·ªó tr·ª£ c√†i Win d·∫°o v4.4")
        self.root.geometry("520x450")
        self.root.resizable(False, False)
        
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (520 // 2)
        y = (self.root.winfo_screenheight() // 2) - (450 // 2)
        self.root.geometry(f"520x450+{x}+{y}")
        
        try:
            icon_path = resource_path("icon.ico")
            self.root.iconbitmap(icon_path)
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ t·∫£i icon: {e}")
            pass
            
        self.root.configure(bg='#f0f0f0')
        
    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán."""
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        header_frame.pack(fill='x', padx=0, pady=0)
        header_frame.pack_propagate(False)
        tk.Label(header_frame, text="üõ†Ô∏è Ti·ªán √≠ch h·ªó tr·ª£ c√†i Win d·∫°o", font=('Arial', 16, 'bold'), fg='white', bg='#2c3e50').pack(pady=(15, 5))
        tk.Label(header_frame, text="Phi√™n b·∫£n ho√†n ch·ªânh v4.4", font=('Arial', 10), fg='#ecf0f1', bg='#2c3e50').pack()
        content_frame = tk.Frame(self.root, bg='#f0f0f0')
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        button_style = {'font': ('Arial', 11, 'bold'), 'width': 22, 'height': 2, 'relief': 'raised', 'bd': 2, 'cursor': 'hand2'}
        row1_frame = tk.Frame(content_frame, bg='#f0f0f0')
        row1_frame.pack(fill='x', pady=10)
        tk.Button(row1_frame, text="üîß Thi·∫øt l·∫≠p Windows", bg='#3498db', fg='white', command=self.windows_setup, **button_style).pack(side='left', padx=10)
        tk.Button(row1_frame, text="üõú Thi·∫øt l·∫≠p m·∫°ng", bg='#95a5a6', fg='white', command=self.open_network_window, **button_style).pack(side='right', padx=10)
        row2_frame = tk.Frame(content_frame, bg='#f0f0f0')
        row2_frame.pack(fill='x', pady=10)
        tk.Button(row2_frame, text="üóëÔ∏è X√≥a Bloatware", bg='#e74c3c', fg='white', command=self.remove_bloatware, **button_style).pack(side='left', padx=10)
        tk.Button(row2_frame, text="üì∂ Sao l∆∞u Wifi", bg='#f39c12', fg='white', command=self.backup_wifi, **button_style).pack(side='right', padx=10)
        row3_frame = tk.Frame(content_frame, bg='#f0f0f0')
        row3_frame.pack(fill='x', pady=10)
        tk.Button(row3_frame, text="üíæ Sao l∆∞u Driver", bg='#27ae60', fg='white', command=self.backup_drivers, **button_style).pack(side='left', padx=10)
        self.status_var = tk.StringVar(value="S·∫µn s√†ng...")
        status_frame = tk.Frame(self.root, bg='#34495e', height=30)
        status_frame.pack(fill='x', side='bottom')
        status_frame.pack_propagate(False)
        tk.Label(status_frame, textvariable=self.status_var, font=('Arial', 9), fg='white', bg='#34495e').pack(side='left', padx=10, pady=5)

    def run_in_thread(self, target_func, *args):
        thread = threading.Thread(target=target_func, args=args, daemon=True)
        thread.start()

    def run_command(self, command, shell=True, check=False):
        try:
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            result = subprocess.run(
                command, shell=shell, capture_output=True, text=True,
                check=check, encoding='utf-8', errors='ignore', startupinfo=startupinfo
            )
            return result.stdout + result.stderr
        except subprocess.CalledProcessError as e:
            return f"L·ªánh th·∫•t b·∫°i v·ªõi m√£ l·ªói {e.returncode}:\n{e.stdout}\n{e.stderr}"
        except Exception as e:
            return f"L·ªói th·ª±c thi l·ªánh: {str(e)}"

    def update_status(self, message):
        self.status_var.set(message)
        self.root.update()
        
    def windows_setup(self): messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
    def remove_bloatware(self): messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
    def backup_drivers(self): messagebox.showinfo("Th√¥ng b√°o", "Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")

    def open_network_window(self):
        """M·ªü c·ª≠a s·ªï qu·∫£n l√Ω v√† thi·∫øt l·∫≠p m·∫°ng."""
        self.net_win = tk.Toplevel(self.root)
        self.net_win.title("Thi·∫øt l·∫≠p m·∫°ng")
        self.net_win.geometry("980x500") # M·ªü r·ªông c·ª≠a s·ªï

        self.net_win.update_idletasks()
        width = self.net_win.winfo_width()
        height = self.net_win.winfo_height()
        x = (self.net_win.winfo_screenwidth() // 2) - (width // 2)
        y = (self.net_win.winfo_screenheight() // 2) - (height // 2)
        self.net_win.geometry(f'{width}x{height}+{x}+{y}')
        
        try:
            icon_path = resource_path("icon.ico")
            self.net_win.iconbitmap(icon_path)
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ t·∫£i icon cho c·ª≠a s·ªï m·∫°ng: {e}")
            pass

        self.net_win.transient(self.root)
        self.net_win.grab_set()

        info_frame = ttk.LabelFrame(self.net_win, text="Th√¥ng tin Card m·∫°ng", padding=(10, 10))
        info_frame.pack(fill='x', padx=10, pady=10)

        cols = ("T√™n", "Lo·∫°i", "ƒê·ªãa ch·ªâ IP", "ƒê·ªãa ch·ªâ MAC", "DNS Servers")
        self.net_tree = ttk.Treeview(info_frame, columns=cols, show='headings', height=8)
        
        for col in cols:
            self.net_tree.heading(col, text=col)
            width = 180 if col == "DNS Servers" else 150
            self.net_tree.column(col, width=width, anchor='w')
        
        self.net_tree.pack(fill='x', expand=True)
        
        refresh_button = tk.Button(info_frame, text="üîÉ T·∫£i l·∫°i danh s√°ch", command=lambda: self.run_in_thread(self.refresh_network_info))
        refresh_button.pack(pady=5)
        
        self.run_in_thread(self.refresh_network_info)

        action_frame = ttk.LabelFrame(self.net_win, text="Ch·ª©c nƒÉng", padding=(10, 10))
        action_frame.pack(fill='x', padx=10, pady=10)

        row1 = tk.Frame(action_frame)
        row1.pack(fill='x', pady=5)
        tk.Button(row1, text="X√≥a Cache DNS", command=self.flush_dns).pack(side='left', padx=5)
        tk.Button(row1, text="Reset TCP/IP", command=self.reset_tcp_ip).pack(side='left', padx=5)
        tk.Button(row1, text="Kh√¥i ph·ª•c WiFi t·ª´ Backup", command=self.restore_wifi).pack(side='left', padx=5)

        dns_frame = ttk.LabelFrame(action_frame, text="ƒê·ªïi DNS nhanh (cho card m·∫°ng ƒë√£ ch·ªçn)", padding=(10, 5))
        dns_frame.pack(fill='x', pady=10)
        tk.Button(dns_frame, text="Google DNS", command=lambda: self.change_dns("8.8.8.8", "8.8.4.4")).pack(side='left', padx=5)
        tk.Button(dns_frame, text="Cloudflare DNS", command=lambda: self.change_dns("1.1.1.1", "1.0.0.1")).pack(side='left', padx=5)
        tk.Button(dns_frame, text="X√≥a DNS (T·ª± ƒë·ªông)", command=lambda: self.change_dns()).pack(side='left', padx=5)

    def _get_dns_servers(self, interface_name):
        """L·∫•y danh s√°ch DNS server cho m·ªôt card m·∫°ng c·ª• th·ªÉ."""
        try:
            result = self.run_command(f'netsh interface ipv4 show dnsservers name="{interface_name}"')
            if "none" in result.lower():
                 return "T·ª± ƒë·ªông (DHCP)"
            
            # S·ª≠ d·ª•ng regex ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c ƒë·ªãa ch·ªâ IP
            dns_servers = re.findall(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', result)
            return ", ".join(dns_servers) if dns_servers else "Kh√¥ng c√≥"
        except Exception:
            return "Kh√¥ng th·ªÉ l·∫•y"

    def refresh_network_info(self):
        self.update_status("ƒêang l√†m m·ªõi th√¥ng tin m·∫°ng...")
        try:
            # X√≥a c√°c m·ª•c c≈©
            for item in self.net_tree.get_children():
                self.net_tree.delete(item)
            
            # L·∫•y th√¥ng tin c∆° b·∫£n
            addrs = psutil.net_if_addrs()
            stats = psutil.net_if_stats()
            
            # Duy·ªát qua t·ª´ng card m·∫°ng
            for intf, addr_list in addrs.items():
                ip = mac = ""
                intf_type = "Up" if stats.get(intf) and stats[intf].isup else "Down"
                for addr in addr_list:
                    if addr.family == psutil.AF_LINK: mac = addr.address
                    if addr.family == 2: ip = addr.address
                
                # L·∫•y th√¥ng tin DNS
                dns = self._get_dns_servers(intf)
                
                # Th√™m v√†o b·∫£ng
                self.net_tree.insert("", "end", values=(intf, intf_type, ip, mac, dns))

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m·∫°ng: {e}", parent=self.net_win)
        finally:
            self.update_status("S·∫µn s√†ng.")

    def _has_wireless_interface(self):
        """Ki·ªÉm tra xem h·ªá th·ªëng c√≥ card m·∫°ng kh√¥ng d√¢y (WiFi) hay kh√¥ng."""
        try:
            result = self.run_command("netsh wlan show interfaces")
            if "There is no wireless interface on the system" in result or "Kh√¥ng c√≥ giao di·ªán kh√¥ng d√¢y n√†o tr√™n h·ªá th·ªëng" in result:
                return False
            return True
        except Exception:
            return False

    def _ensure_wlansvc_running(self):
        """Ki·ªÉm tra v√† kh·ªüi ƒë·ªông d·ªãch v·ª• WLAN AutoConfig n·∫øu c·∫ßn."""
        try:
            service = psutil.win_service_get('wlansvc')
            if service.status() == 'running':
                return True
        except psutil.NoSuchProcess:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• WLAN AutoConfig (wlansvc).", parent=self.net_win if hasattr(self, 'net_win') else self.root)
            return False
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra d·ªãch v·ª• WLAN: {e}", parent=self.net_win if hasattr(self, 'net_win') else self.root)
            return False

        self.update_status("D·ªãch v·ª• WLAN ch∆∞a ch·∫°y, ƒëang kh·ªüi ƒë·ªông...")
        result = self.run_command("net start wlansvc", check=True)
        time.sleep(2) 
        
        try:
            service.refresh()
            if service.status() == 'running':
                self.update_status("D·ªãch v·ª• WLAN ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
                return True
            else:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông d·ªãch v·ª• WLAN AutoConfig.\nK·∫øt qu·∫£:\n{result}", parent=self.net_win if hasattr(self, 'net_win') else self.root)
                return False
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói sau khi c·ªë kh·ªüi ƒë·ªông d·ªãch v·ª• WLAN: {e}", parent=self.net_win if hasattr(self, 'net_win') else self.root)
            return False

    def restore_wifi(self):
        if not self._has_wireless_interface():
            messagebox.showwarning("Kh√¥ng t√¨m th·∫•y Card WiFi", "Kh√¥ng t√¨m th·∫•y card m·∫°ng WiFi tr√™n h·ªá th·ªëng.\n\nCh·ª©c nƒÉng n√†y kh√¥ng th·ªÉ ho·∫°t ƒë·ªông.\n\n(L∆∞u √Ω: N·∫øu b·∫°n ƒëang d√πng m√°y ·∫£o, b·∫°n c·∫ßn k·∫øt n·ªëi m·ªôt USB WiFi v√†o m√°y ·∫£o ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y).")
            return

        files = filedialog.askopenfilenames(
            title="Ch·ªçn c√°c file backup WiFi (.xml)",
            filetypes=[("XML files", "*.xml"), ("All files", "*.*")],
            parent=self.net_win
        )
        if not files:
            self.update_status("ƒê√£ h·ªßy kh√¥i ph·ª•c WiFi.")
            return
        self.run_in_thread(self._restore_wifi_task, files)

    def _restore_wifi_task(self, files):
        """T√°c v·ª• kh√¥i ph·ª•c WiFi, s·ª≠ d·ª•ng 'user=all' ƒë·ªÉ tƒÉng t∆∞∆°ng th√≠ch."""
        if not self._ensure_wlansvc_running():
            self.update_status("S·∫µn s√†ng.")
            return

        success_count = 0
        total_files = len(files)
        
        for i, file_path in enumerate(files, 1):
            self.update_status(f"ƒêang kh√¥i ph·ª•c {i}/{total_files}...")
            command = f'netsh wlan add profile filename="{file_path}" user=all'
            result = self.run_command(command)
            
            if "is added on interface" in result.lower() or "ƒë∆∞·ª£c th√™m tr√™n giao di·ªán" in result.lower():
                success_count += 1
        
        messagebox.showinfo(
            "Ho√†n th√†nh",
            f"ƒê√£ kh√¥i ph·ª•c th√†nh c√¥ng {success_count}/{total_files} profile WiFi.",
            parent=self.net_win
        )
        self.update_status("S·∫µn s√†ng.")

    def flush_dns(self):
        self.update_status("ƒêang x√≥a cache DNS...")
        self.run_in_thread(self._flush_dns_task)

    def _flush_dns_task(self):
        result = self.run_command("ipconfig /flushdns")
        if "successfully flushed the dns resolver cache" in result.lower() or "ƒë√£ x√≥a th√†nh c√¥ng b·ªô ƒë·ªám c·ªßa tr√¨nh ph√¢n gi·∫£i dns" in result.lower():
            messagebox.showinfo("Ho√†n th√†nh", f"ƒê√£ x√≥a cache DNS th√†nh c√¥ng.\n\nK·∫øt qu·∫£:\n{result.strip()}", parent=self.net_win)
        else:
            messagebox.showerror("L·ªói", f"X√≥a cache DNS th·∫•t b·∫°i.\n\nK·∫øt qu·∫£:\n{result.strip()}", parent=self.net_win)
        self.update_status("S·∫µn s√†ng.")

    def reset_tcp_ip(self):
        self.update_status("ƒêang reset TCP/IP...")
        self.run_in_thread(self._reset_tcp_ip_task)

    def _reset_tcp_ip_task(self):
        result = self.run_command("netsh int ip reset")
        if "resetting" in result.lower() and "ok" in result.lower():
             messagebox.showinfo("Ho√†n th√†nh", f"Reset TCP/IP th√†nh c√¥ng. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i m√°y t√≠nh ƒë·ªÉ ho√†n t·∫•t.\n\nK·∫øt qu·∫£:\n{result.strip()}", parent=self.net_win)
        else:
            messagebox.showerror("L·ªói", f"Reset TCP/IP th·∫•t b·∫°i.\n\nK·∫øt qu·∫£:\n{result.strip()}", parent=self.net_win)
        self.update_status("S·∫µn s√†ng.")

    def change_dns(self, dns1=None, dns2=None):
        selected_item = self.net_tree.focus()
        if not selected_item:
            messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt card m·∫°ng t·ª´ danh s√°ch.", parent=self.net_win)
            return
        
        interface_name = self.net_tree.item(selected_item)['values'][0]
        self.update_status(f"ƒêang ƒë·ªïi DNS cho '{interface_name}'...")
        self.run_in_thread(self._change_dns_task, interface_name, dns1, dns2)

    def _change_dns_task(self, interface_name, dns1, dns2):
        if dns1 is None: # X√≥a DNS
            command = f'netsh interface ipv4 set dnsserver name="{interface_name}" source=dhcp'
            result = self.run_command(command)
            if "error" not in result.lower() and "l·ªói" not in result.lower() and result.strip() == "":
                 messagebox.showinfo("Ho√†n th√†nh", f"ƒê√£ x√≥a DNS cho '{interface_name}'. Card m·∫°ng s·∫Ω nh·∫≠n DNS t·ª± ƒë·ªông.", parent=self.net_win)
            else:
                 messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a DNS.\n\nK·∫øt qu·∫£:\n{result.strip()}", parent=self.net_win)
        else: # Set DNS
            command1 = f'netsh interface ipv4 set dnsserver name="{interface_name}" static {dns1} primary'
            command2 = f'netsh interface ipv4 add dnsserver name="{interface_name}" {dns2} index=2'
            result1 = self.run_command(command1)
            result2 = self.run_command(command2)
            
            if (result1.strip() == "" and result2.strip() == ""):
                messagebox.showinfo("Ho√†n th√†nh", f"ƒê√£ ƒë·ªïi DNS cho '{interface_name}' th√†nh c√¥ng.", parent=self.net_win)
            else:
                full_result = f"L·ªánh 1:\n{result1.strip()}\n\nL·ªánh 2:\n{result2.strip()}"
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªïi DNS.\n\nK·∫øt qu·∫£:\n{full_result}", parent=self.net_win)

        self.update_status("S·∫µn s√†ng.")

    def backup_wifi(self):
        if not self._has_wireless_interface():
            messagebox.showwarning("Kh√¥ng t√¨m th·∫•y Card WiFi", "Kh√¥ng t√¨m th·∫•y card m·∫°ng WiFi tr√™n h·ªá th·ªëng.\n\nCh·ª©c nƒÉng n√†y kh√¥ng th·ªÉ ho·∫°t ƒë·ªông.\n\n(L∆∞u √Ω: N·∫øu b·∫°n ƒëang d√πng m√°y ·∫£o, b·∫°n c·∫ßn k·∫øt n·ªëi m·ªôt USB WiFi v√†o m√°y ·∫£o ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y).")
            return
        self.update_status("B·∫Øt ƒë·∫ßu sao l∆∞u WiFi...")
        self.run_in_thread(self._backup_wifi_task)

    def _backup_wifi_task(self):
        if not self._ensure_wlansvc_running():
            self.update_status("S·∫µn s√†ng.")
            return
            
        log_messages = []
        try:
            log_messages.append("=== B·∫Øt ƒë·∫ßu sao l∆∞u WiFi v4.1 ===\n")
            self.update_status("ƒêang l·∫•y danh s√°ch WiFi...")
            profiles_result = self.run_command("netsh wlan show profiles")
            log_messages.append(f"K·∫øt qu·∫£ l·ªánh 'netsh wlan show profiles':\n{profiles_result}\n")
            profiles = []
            for line in profiles_result.split('\n'):
                if "All User Profile" in line or "H·ªì s∆° T·∫•t c·∫£ Ng∆∞·ªùi d√πng" in line:
                    try:
                        profile_name = line.split(':', 1)[1].strip()
                        if profile_name: profiles.append(profile_name)
                    except IndexError: continue
            log_messages.append(f"ƒê√£ ph√¢n t√≠ch. T√¨m th·∫•y {len(profiles)} profile.\n")
            if not profiles:
                messagebox.showwarning("Kh√¥ng t√¨m th·∫•y", "Kh√¥ng c√≥ profile WiFi n√†o ƒë·ªÉ sao l∆∞u.")
                self.update_status("S·∫µn s√†ng.")
                return
            backup_dir = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ƒë·ªÉ l∆∞u backup WiFi")
            if not backup_dir:
                self.update_status("ƒê√£ h·ªßy sao l∆∞u.")
                return
            backup_path = Path(backup_dir) / "WiFi_Backup"
            backup_path.mkdir(exist_ok=True)
            log_messages.append(f"Th∆∞ m·ª•c sao l∆∞u: {backup_path}\n")
            wifi_data = []
            success_count = 0
            for i, profile in enumerate(profiles, 1):
                self.update_status(f"ƒêang x·ª≠ l√Ω {i}/{len(profiles)}: {profile}")
                try:
                    self.run_command(f'netsh wlan export profile name="{profile}" folder="{backup_path}" key=clear')
                    result_show = self.run_command(f'netsh wlan show profile name="{profile}" key=clear')
                    password = "(Kh√¥ng c√≥ m·∫≠t kh·∫©u ho·∫∑c l·ªói)"
                    for res_line in result_show.split('\n'):
                        if "Key Content" in res_line or "N·ªôi dung Kh√≥a" in res_line:
                            password = res_line.split(':', 1)[1].strip()
                            break
                    wifi_data.append(f"usename: {profile}   : {password}")
                    success_count += 1
                    log_messages.append(f"Th√†nh c√¥ng: {profile}\n")
                except Exception as e:
                    log_messages.append(f"L·ªñI v·ªõi profile '{profile}': {str(e)}\n")
                    wifi_data.append(f"usename: {profile}   : (L·ªói: {str(e)})")
                    continue
            if wifi_data:
                with open(backup_path / "WiFi_Passwords.txt", "w", encoding="utf-8") as f: f.write("\n".join(wifi_data))
                log_messages.append("Ghi file .txt th√†nh c√¥ng.\n")
            messagebox.showinfo("Ho√†n th√†nh", f"ƒê√£ x·ª≠ l√Ω xong. Th√†nh c√¥ng: {success_count}/{len(profiles)}.\nD·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u t·∫°i:\n{backup_path}")
            os.startfile(backup_path)
        except Exception as e:
            log_file = Path.home() / "windows_utility_tool_wifi_log.txt"
            error_message = f"L·ªói nghi√™m tr·ªçng: {str(e)}"
            log_messages.append(f"\nL·ªñI NGHI√äM TR·ªåNG X·∫¢Y RA: {error_message}")
            try:
                with open(log_file, "w", encoding="utf-8") as log: log.write("\n".join(log_messages))
                messagebox.showerror("L·ªói", f"{error_message}\n\nChi ti·∫øt l·ªói ƒë√£ ƒë∆∞·ª£c ghi t·∫°i:\n{log_file}")
            except Exception as log_e: messagebox.showerror("L·ªói nghi√™m tr·ªçng", f"L·ªói ch√≠nh: {error_message}\n\nKh√¥ng th·ªÉ ghi file log: {log_e}")
        finally:
            self.update_status("S·∫µn s√†ng.")

def main():
    if os.name != 'nt':
        messagebox.showerror("Kh√¥ng t∆∞∆°ng th√≠ch", "C√¥ng c·ª• n√†y ch·ªâ ch·∫°y tr√™n Windows.")
        return
        
    # --- Th√™m logic ki·ªÉm tra single-instance ---
    try:
        with SingleInstance("WindowsUtilityTool_Doctoten_App_Mutex"):
            if not is_admin():
                try:
                    ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
                except Exception as e:
                    messagebox.showerror("Y√™u c·∫ßu quy·ªÅn Admin", f"Kh√¥ng th·ªÉ t·ª± ƒë·ªông y√™u c·∫ßu quy·ªÅn Admin.\nL·ªói: {e}")
                return

            try:
                root = tk.Tk()
                app = WindowsUtilityTool(root)
                root.mainloop()
            except Exception as e:
                messagebox.showerror("L·ªói kh·ªüi ƒë·ªông", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {str(e)}")

    except RuntimeError as e:
        messagebox.showwarning("Th√¥ng b√°o", str(e))
        return

if __name__ == "__main__":
    main()
